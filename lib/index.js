// Generated by CoffeeScript 1.7.1

/*
Created by massimo on 2014/4/12.
express-mvc framework
 */

(function() {
  var configRoute, cons, express, fs, getMethodInfo, path, setDefault;

  fs = require("fs");

  express = require("express");

  path = require("path");

  cons = require("consolidate");


  /*
  配置路由
  @param options
  @param {String} [options.controllerPath="controller"] controller path
  @pram {String} [options.viewPath="views"] views path
  @param parentApp app
   */

  module.exports = function(options, parentApp) {
    var PROJECT_DIR, defaultFilterPath, filter;
    if (!parentApp) {
      parentApp = options;
      options = {};
    }
    setDefault(options, {
      controllerPath: "controllers",
      viewPath: "views"
    });
    PROJECT_DIR = path.join(__dirname, "../");
    if (!options.filter) {
      defaultFilterPath = path.join(PROJECT_DIR, "filter.js");
      if (fs.existsSync(defaultFilterPath)) {
        filter = require(defaultFilterPath);
      } else {
        filter = {};
      }
    }
    return fs.readdirSync(path.join(PROJECT_DIR, options.controllerPath)).forEach(function(fileName) {
      var $mvcConfig, app, controller, controllerName, engine, func, httpVerbs, i, individualConfig, itemMethod, itemMiddleware, j, key, methodInfo, middleware, viewEngine;
      if (fileName.slice(-3) === ".js") {
        controllerName = fileName.slice(0, -3);
        controller = require(path.join(PROJECT_DIR, options.controllerPath, controllerName));
        $mvcConfig = controller.$mvcConfig;
        app = express();
        engine = "swig";
        if (typeof $mvcConfig !== "undefined" && $mvcConfig.engine) {
          engine = $mvcConfig.engine;
        }
        viewEngine = (typeof $mvcConfig !== "undefined" && $mvcConfig.viewEngine ? $mvcConfig.viewEngine : void 0) || "html";
        if (options.viewPath) {
          app.engine("html", cons[engine]);
          app.set("view engine", viewEngine);
          app.set("views", path.join(PROJECT_DIR, options.viewPath, controllerName));
        }
        for (key in controller) {
          if (key[0] === "$") {
            continue;
          }
          methodInfo = getMethodInfo(key);
          if ($mvcConfig && $mvcConfig.route && $mvcConfig.route[methodInfo.action]) {
            individualConfig = $mvcConfig.route[methodInfo.action];
            httpVerbs = individualConfig.httpVerbs || methodInfo.httpVerbs;
            middleware = individualConfig.middleware || methodInfo.middleware;
            methodInfo = {
              action: methodInfo.action,
              httpVerbs: httpVerbs,
              middleware: middleware,
              path: individualConfig.path
            };
          }
          if (!methodInfo.path) {
            methodInfo.path = methodInfo.path || ("/" + controllerName + "/" + methodInfo.action);
          }
          if (methodInfo.middleware) {
            i = 0;
            while (i < methodInfo.middleware.length) {
              itemMiddleware = methodInfo.middleware[i];
              func = controller[itemMiddleware] || filter[itemMiddleware];
              if (func && typeof func === "function") {
                if (controllerName === "home") {
                  configRoute(app, "all", "/", func);
                }
                if (methodInfo.action === "index") {
                  configRoute(app, "all", "/" + controllerName, func);
                }
                configRoute(app, "all", methodInfo.path, func);
              } else {
                console.log("can not find filter", itemMiddleware);
              }
              i++;
            }
          }
          j = 0;
          while (j < methodInfo.httpVerbs.length) {
            itemMethod = methodInfo.httpVerbs[j];
            if (controllerName === "home") {
              configRoute(app, itemMethod, "/", controller[key]);
            }
            if (methodInfo.action === "index") {
              configRoute(app, itemMethod, "/" + controllerName, controller[key]);
            }
            configRoute(app, itemMethod, methodInfo.path, controller[key]);
            j++;
          }
        }
        return parentApp.use(app);
      }
    });
  };


  /*
  配置路由
  @param app
  @param method
  @param path
  @param func
   */

  configRoute = function(app, method, path, func) {
    return app[method](path, func);
  };


  /*
  获取方法支持的HTTP方法和中间件信息
   */

  getMethodInfo = function(methodName) {
    var arr, httpVerbs, middleware;
    arr = methodName.split("_");
    httpVerbs = [];
    middleware = [];
    arr.slice(1).forEach(function(item) {
      if (item[0] === "$") {
        middleware.push(item);
      } else {
        httpVerbs.push(item.toLowerCase());
      }
    });
    if (httpVerbs.length <= 0) {
      httpVerbs.push("get");
    }
    return {
      action: arr[0],
      httpVerbs: httpVerbs,
      middleware: middleware
    };
  };


  /*
      set default options
   */

  setDefault = function(options, defaultOptions) {
    var key, value, _results;
    _results = [];
    for (key in defaultOptions) {
      value = defaultOptions[key];
      if (!options[key]) {
        _results.push(options[key] = value);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);

//# sourceMappingURL=index.map
